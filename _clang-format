---
# 现在使用的版本是clang-format-6，但是配置文件使用的是clang 10中的说明，所以由于版本不一致，有些配置当前系统的clang-format不支持，注释了

Language:        Cpp
# BasedOnStyle:  Google

# 访问说明符（private,public）的缩进
AccessModifierOffset: -2

#  开括号后参数的纵向对齐
AlignAfterOpenBracket: Align

# 对齐连续行的赋值操作符
AlignConsecutiveAssignments: false

# 对齐连续行中的声明
AlignConsecutiveDeclarations: false

# 对齐连续行的宏声明
# AlignConsecutiveMacros false

# 对齐连续行中的转义续行符
AlignEscapedNewlines: Left

# 对齐二元表达式或三元表达式中的操作数
AlignOperands: true

# 对齐行尾注释
AlignTrailingComments: false

# 如果函数调用或括号内的初始化列表不适合某一行，则允许将所有参数放到下一行，即使BinPackArguments为false也是如此。
# AllowAllArgumentsOnNextLine false

# 如果具有成员初始值设定项列表的构造函数定义不适合单行，而ConstructorInitializerAllOnOneLineOrOnePerLine为true，则允许将所有成员初始值设定项放到下一行。
# AllowAllConstructorInitializersOnNextLine true

# 如果函数声明不适合某一行，则允许将函数声明的所有参数放到下一行，即使BinPackParameters为false。
AllowAllParametersOfDeclarationOnNextLine: true

# 允许简单的代码块写成单行
AllowShortBlocksOnASingleLine: false

# 允许简单的case 块写成单行
AllowShortCaseLabelsOnASingleLine: false

# 允许简单的函数块写成单行
AllowShortFunctionsOnASingleLine: All

# 允许简单的if语句块写成单行
AllowShortIfStatementsOnASingleLine: true

# 简单的lambda语句块位于一行
# AllowShortLambdasOnASingleLine All

# 允许简短的循环语句块单行
AllowShortLoopsOnASingleLine: true

# 函数定义中return语句后是否换行，该选项已经deprecated。
# AlwaysBreakAfterDefinitionReturnType: None

# return语句后换行
AlwaysBreakAfterReturnType: None

# 多行字符串前换行
AlwaysBreakBeforeMultilineStrings: true

# 模板声明后换行
# AlwaysBreakTemplateDeclarations: false

# 如果为false，实参要么放在同一行，要么各自一行
BinPackArguments: true

# 如果为false，形参要么放在同一行，要么各自一行
BinPackParameters: true

# 以下位置与其后的大括号之间是否存在换行，只有当 BreakBeforeBraces 设置为 Custom 时才有效
BraceWrapping:
  # case 后换行
  # AfterCaseLabel  false
  # class定义后
  AfterClass:      false
  # 控制语句后
  AfterControlStatement: false
  # enum定义后
  AfterEnum:       false
  # 函数定义后
  AfterFunction:   false
  # 命名空间后
  AfterNamespace:  false
  # 对象声明后
  AfterObjCDeclaration: false
  AfterStruct:     false
  AfterUnion:      false
  AfterExternBlock: false
  BeforeCatch:     true
  BeforeElse:      true
  IndentBraces:    false
  SplitEmptyFunction: true
  SplitEmptyRecord: true
  SplitEmptyNamespace: true

# 在Java文件中的字段上的每个注释之后换行
BreakAfterJavaFieldAnnotations: false

# 二元操作符前换行
BreakBeforeBinaryOperators: NonAssignment

# 大括号前换行
BreakBeforeBraces: Attach

# 如果为true，三元操作符在换行符后
BreakBeforeTernaryOperators: true

# 构造函数列表初始化换行位置
BreakConstructorInitializers: BeforeColon

# 继承列表换行
# BreakInheritanceList BeforeColon

# 如果为true，继承冒号前换行
BreakBeforeInheritanceComma: false

# 字符串格式化时换行
BreakStringLiterals: true

# 单行长度
ColumnLimit:     80

# 一个正则表达式，用于描述具有特殊含义的注释，不应将其分解为行或以其他方式更改。
CommentPragmas:  '^ IWYU pragma:'

# 如果为true，则连续的名称空间声明将位于同一行上。如果为false，则每个命名空间都在新行中声明。
CompactNamespaces: false

# 如果构造函数初始化列表不适合在一行，每个初始值韩一航
ConstructorInitializerAllOnOneLineOrOnePerLine: true

# 构造函数初始化列表缩进宽度
ConstructorInitializerIndentWidth: 4

# 续行的缩进宽度
ContinuationIndentWidth: 4

# 如果为true，则将花括号列表格式化为最适合C++11花括号列表的格式。
Cpp11BracedListStyle: true

# 如果为true，则分析格式化文件以查找最常见的＆和*对齐。指针和参考对齐方式将根据文件中的偏好进行更新。 PointerAlignment然后仅用作后备。
DerivePointerAlignment: true

# 完全禁用格式化
DisableFormat:   false

# 如果为true，clang-format会添加缺少的名称空间结束注释并修复无效的现有注释。
FixNamespaceComments: true
#
ForEachMacros:
  - foreach
  - Q_FOREACH
  - BOOST_FOREACH

# 根据该值，可以将多个#include块排序为一个，并根据类别进行划分。
IncludeBlocks:   Preserve
# 用于排序分组#include类别的正则表达式。
IncludeCategories:
  - Regex:           '^<ext/.*\.h>'
    Priority:        2
  - Regex:           '^<.*\.h>'
    Priority:        1
  - Regex:           '^<.*'
    Priority:        2
  - Regex:           '.*'
    Priority:        3

# 指定file-to-main-include映射中允许的后缀的正则表达式。
# includeIsMainRegex: '([-_](test|unittest))?$'

# switch语句中将case缩进一个级别
IndentCaseLabels: true

# 预处理指令的缩进样式
# IndentPPDirectives: BeforeHash

# 缩进宽度
IndentWidth: 4

# 缩进换行的返回类型后的函数名
IndentWrappedFunctionNames: false

# 用于JavaScript字符串的引号（双引号、单引号、不改动）
JavaScriptQuotes: Leave

# JavaScript import/export 语句是否换行
JavaScriptWrapImports: true

# 是否保留块开始出的空白
KeepEmptyLinesAtTheStartOfBlocks: false

# 匹配块宏开始的正则表达式
MacroBlockBegin: ''

# 匹配块宏结束的正则表达式
MacroBlockEnd:   ''

# 要保留的连续空行的最大数量。
MaxEmptyLinesToKeep: 1

# 缩进命名空间的样式
NamespaceIndentation: All

ObjCBlockIndentWidth: 2
ObjCSpaceAfterProperty: false
ObjCSpaceBeforeProtocolList: false

PenaltyBreakAssignment: 2
PenaltyBreakBeforeFirstCallParameter: 1
PenaltyBreakComment: 300
PenaltyBreakFirstLessLess: 120
PenaltyBreakString: 1000
PenaltyExcessCharacter: 1000000
PenaltyReturnTypeOnItsOwnLine: 200

# 指针和引用的对齐方式
PointerAlignment: Right

# 定义用于检测所支持语言的原始字符串
# RawStringFormats:
#   - Language:        Cpp
#     Delimiters:
#       - cc
#       - CC
#       - cpp
#       - Cpp
#       - CPP
#       - 'c++'
#       - 'C++'
#     CanonicalDelimiter: ''
#     BasedOnStyle:    google
#   - Language:        TextProto
#     Delimiters:
#       - pb
#       - PB
#       - proto
#       - PROTO
#     EnclosingFunctions:
#       - EqualsProto
#       - EquivToProto
#       - PARSE_PARTIAL_TEXT_PROTO
#       - PARSE_TEST_PROTO
#       - PARSE_TEXT_PROTO
#       - ParseTextOrDie
#       - ParseTextProtoOrDie
#     CanonicalDelimiter: ''
#     BasedOnStyle:    google

# If true, clang-format 会重新组织注释
ReflowComments:  true

# 如果true，clang-format 会重新排序头文件
SortIncludes:    true

# 如果true，clang-format 会重新排序 using 声明
SortUsingDeclarations: true

# 如果true，c 风格的类型转换后保留空格。
SpaceAfterCStyleCast: false

# 逻辑非后面加空格
# SpaceAfterLogicalNot false

# 如果true，template关键字后保留空格。
SpaceAfterTemplateKeyword: true

# 如果false，删除赋值操作符前的空格
SpaceBeforeAssignmentOperators: true

# c11 括号列表前是否有空格
# SpaceBeforeCpp11BracedList true

# 构造函数初始化冒号前是否存在空格
# SpaceBeforeCtorInitializerColon true

# 继承关系的冒号前是否有空格
# SpaceBeforeInheritanceColon true

# 括号前是否插入空格
SpaceBeforeParens: Always

# 如果为false，则在基于范围的循环冒号之前将删除空格。
# SpaceBeforeRangeBasedForLoopColon true

# 空的代码块{}中间是否插入空格
# SpaceInEmptyBlock false

# 如果true，空的括号中插入空格。
# SpaceInEmptyParentheses false

# 行尾注释前的空格
SpacesBeforeTrailingComments: 2

# 尖空号内侧空格
SpacesInAngles:  false

# c风格的类型转换括号内部两边空格
SpacesInCStyleCastParentheses: false

# 容器内两边是否有空格
SpacesInContainerLiterals: false

# 圆括号内侧两边的空格
SpacesInParentheses: false

# 方括号内的空格
SpacesInSquareBrackets: false

# 格式化对应的C++标准
Standard:        Auto

# tab对应的空格数量
TabWidth:        4

# 在结果文件中使用制表符的方式
UseTab:          Never
...
